<?php


/*************************************** (2018-5-24) bb *****************************************************/
json [
	{ }
	{ }
]
关于在smarty js php 数据之间的传递

/*************************************** (2018-5-23) bb *****************************************************/
PHP 垃圾回收机制 zval变量容器 
内存泄漏 内存溢出
PHP 安全模式 解决共享服务器的安全问题 现已废弃 应该有别的方案
数据库持久连接： 数据库连接的几种模式 持久连接的好处和需要注意的地方

/*************************************** (2018-5-22) bb *****************************************************/
RPC 与 Restful
【工作内容】
	新需求 具体看trello看板

	*根据需求

/*************************************** (2018-5-21) bb *****************************************************/
php协议与封装协议
生成器

mysql 日期与时间戳 相互转换
mysql 日期一般用什么数据类型存储 
mysql 注释 comment后面不是等于

单文件的版本回退
git fetch
错误的将本地分支推送到一个不存在的远程分支 


【工作内容】
	看板 520 review 中的问题 代码重构 合理利用现有的数据 
	
	* 利用curl 测试脚本 脚本里面断点	
	* 多开几个sql 窗口 效率也会高点 | curl 怎么找到合适的参数


/*************************************** (2018-5-20) bb *****************************************************/
【工作内容】
	修复 review 
	批量更新
	后台如何添加下载任务 脚本
	二维数组 取值和赋值
	上下文选项





/*************************************** (2018-5-18) 快捷键 *****************************************************/




【last week】
	 

时间 5.13～5.17

本周工作内容： 
	
	1.自定义对账流水 service 服务

	 i.构造itemIdList查询对账单详情
	 ii.增加fields自定义约束
	 iii.构造批量添加

	2.order_deduction 表增加税金字段 orderTaxPrice returnTaxPrice

	 i. 订单商品税金 orderTaxPrice
        i. 公式 税金=实付/1.091*0.091
        ii. 四舍五入，保留两位小数，注意浮点数精度问题
        iii. 实付金额  = order_item.itemPrice-promotionPrice-couponPrice-promotionCodePrice

     ii.退货商品税金 returnTaxPrice
        i. 退货税金 = 订单税金
        ii. 只在退货原因为'平台原因'时收取 0 < refund.reasonType < 100
        iii. returnId>0 （表示退货退款）

    3. 生成对账单详情插入税金
     
     i.批量插入 新增必传字段 orderTaxPrice 
     ii. 判断 若为非保税仓  supplier_website.customsCode = '' 订单税金设为0
     iii. 退货税金只在更新的时候修改

    4. 对账单详情生成对账单

     i.订单金额 = 订单商品金额 + 订单税金 
     ii.退货金额 = 退货商品金额 + 退货税金 
	
	5.一件代发对账单导出

	 i.订单导出
	 ii.退款单导出
	 iii.脚本参数 对应导出类型

	6.重新计算对账单金额

工作进度： 以上全部提交 2～6 等待 review

本周未完成内容： 无

下周工作内容： 待确认

本周学习内容：
	（1）理解 service 层 get|add|update 的传参、结果
	（2）理解 format 对 conds 的解析
	（3）理解 BBT_Error 的实现机制和常规错误码
	（4）理解 daemon脚本监听 执行脚本注册工作机制

疑问：
	主要问题在于业务流程和表间关系 不熟悉推导耗时间


/*************************************** (2018-5-17) BonBonWork *****************************************************/
	1.一件代发对账单导出

	 i.订单导出
	 ii.退款单导出
	 iii.脚本参数 对应导出类型

	2.重新计算对账单金额

/*************************************** (2018-5-16) BonBonWork *****************************************************/
	1.order_deduction 表增加税金字段 orderTaxPrice returnTaxPrice

	 i. 订单商品税金 orderTaxPrice
        i. 公式 税金=实付/1.091*0.091
        ii. 四舍五入，保留两位小数，注意浮点数精度问题
        iii. 实付金额 order_item.itemPrice-promotionPrice-couponPrice-promotionCodePrice

     ii.退货商品税金 returnTaxPrice
        i. 退货税金 = 订单税金
        ii. 只在退货原因为'平台原因'时收取 0 < refund.reasonType < 100
        iii. returnId>0 （表示退货退款）

    2. 生成对账单详情插入税金
     
     i.批量插入 新增必传字段 orderTaxPrice 
     ii. 判断 若为非保税仓  supplier_website.customsCode = '' 订单税金设为0
     iii. 退货税金只在更新的时候修改

    3. 对账单详情生成对账单

     i.订单金额 = 订单商品金额 + 订单税金 
     ii.退货金额 = 退货商品金额 + 退货税金 



/*************************************** (2018-5-15) BonBonWork *****************************************************/
	1.自定义对账流水 service 服务

	 i.构造itemIdList查询对账单详情
	 ii.增加fields自定义约束
	 iii.构造批量添加

	2.自定义json 调用脚本生成 mvc 文件


/*************************************** (2018-5-14) BonBonWork *****************************************************/
	1.mav渲染 写了tpl 后来又让我搞 service

	format
	createIN
	错误码
	脚本 、 注册

	mvc service 层
	mav 流程 、 tpl  mav 页面的增删改查 
【工作内容】
	*** 大坑： call 调用service的时候 传的参数外面必须用数组包起来 

/*************************************** (2018-5-13) BonBonWork *****************************************************/
【工作内容】
	util authrity|uiorder 优化
	mysql 字符集
	数据库隔离级别 系统默认可重复读 
	数据库事务流程

	* bug分支 master分支
	* POP 流程 （一般流程 | 异常流程 | 流程涉及的表及表间关系 | 主子表 | item/sku | 订单流水表生成对账单 ）
	* 可结算日期 和 订单流水
	* 自动化脚本生成 mvc 自定义mvc
	* 错误日志 error_log

/*************************************** (2018-5-10) BonBonWork *****************************************************/
1.git pull (默认master) git pull origin feature (拉分支)
2.有冲突 合并
3.diff
4.git add file
5.git commit 
6.git push

/*************************************** (2018-5-9) BonBonWork *****************************************************/
finished 权限升级 | mvc的调用 tpl渲染
todo  
	菜单生成升级和兼容 [ok]
	js 正则匹配 [ok]


搞懂 bbt/base 里面的一些应用 及部分细节

* git diff 版本控制查看

【坑】 ： ui/controller 文件命名+类的命名



/*************************************** (2018-5-8) 棒棒糖 *****************************************************/

【坑】
	sublime install package 没有返回安装包列表 设置 preference control user-set 配置文件

【git】
	如果远程没有分支 =》 生成远程分支 ： git push origin master:feature | git checkout -b feature + git push origin feature:feature
	如果远程有分支，本地没有对应分支 =》 生成本地对应分支 ：git checkout -b feature origin/feature
	如果远程、本地都有分支 实时更新本地分支 ：git pull origin feature
	如果远程、本地都有分支 实时更新远程分支 ：git push origin feature:feature



/*************************************** (2018-5-6) Python *****************************************************/
面试

/*************************************** (2018-5-3) Python *****************************************************/
【错误、调试、测试】
	错误： 主要讲了如何去捕获错误 而且其中有一个细节注意一下 就是其中的执行流程
		  然后注意一下格式
		  * 抛出错误 我觉得他的用处有两点 第一个是可以不用事先捕获 第二个是可以自定义错误类型





【面向对象】
	声明类： class Sample(object)
	类实例化： Sample()

	构造函数：
		__init__(self) # self 必须传 类似于PHP中的this

	访问控制：
		self.__key # 这个key就是一个私有变量 外部不能访问
		** 注意：
			当变量被设置为私有属性时 不能通过self.__key = value 赋值 因为内部的私有变量已经被解析为_Class__key 这样赋值实质上是产生了一个新值
			Class Student(object):
				def __init__(self,name,age):
					self.__name = name
					self.__age = age
				def get_name(self):
					return self.__name
				
			stu = Student('entner',23)
			stu.get_name()

	python 的继承|封装|多态


【模块】
	模块规范




【python 高级特性】 
 
 切片 - 实质上就是截取集合中的部分元素 下面是两种写法
 	[0:3] [11:20]
 	[10::2] [::5]

 生成器 -
 	两种方式 ： 列表生成式转换 | yield 

 迭代器	-
 	for循环的对象统称为可迭代对象：Iterable
 	检测对象是否为Iterable ==> isinstance([],iterable)

 	被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator

 	it = iter([1,2,3,4]) # 将list转换为 iterator

 	try:
 		x = next(it)
 	catch(exception Stopiteration):

 	break




/*************************************** (2018-5-3) Python *****************************************************/
【python 基础】
	python 是大小写敏感的

【数据类型】
	常见的整形、浮点型、字符串、布尔
	* 空值 none
	dict ： 就是key-value 
	set ： 指储存key值的 dict

	list（有序集合） 类似于PHP的 array
		创建
		访问
		追加： append
		插入： insert
		删除： pop
	tuple （有序元组） 可以理解为只读的 list


【条件判断】 （注意冒号） ==》 
	if x ：

	else ：



【输入 输出】
	输出：
		* python 可以输出多个字符串 是通过，隔开的哦 PHP是. JS 是 +

	输入：
		使用 input() 函数 可以赋值给变量 不用任何变量声明 如 name  = input()


【函数】
	* 函数可以返回多个值 但实际上返回的就是一个tuple

	函数参数：

		默认参数:  定义默认参数要牢记一点：默认参数必须指向不变对象！

		可变参数: 就是传入的参数个数是可变的 其实就是传入数组 PHP里面是直接用数组的形式
			*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。
		关键字参数：
			可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：

			def person(name, age, **kw):
			    print('name:', name, 'age:', age, 'other:', kw)
			函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：

			>>> person('Michael', 30)
			name: Michael age: 30 other: {}
			也可以传入任意个数的关键字参数：

			>>> person('Bob', 35, city='Beijing')
			name: Bob age: 35 other: {'city': 'Beijing'}
			>>> person('Adam', 45, gender='M', job='Engineer')
			name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}


/*************************************** (2018-5-3) 文本格式化工具 awk *****************************************************/
【基础入门】
	awk -选项 （模式）（行为）

	* awk 可以打印多个列
	* 具体列不要加$符号
	* awk是一行一行处理的

	常见的内置变量：
		¥0 ： 代表整行
		¥NF ： 代表最后一列
		¥NR： 代表第一列
		NR： 代表行号
		NF： 代表所有字段总数

【分隔符】
	两个概念：
		1.输入分隔符 FS 
		2.输出分隔符 OFS

		-F 指定输入分隔符
		-v OFS=“xxx” 指定输出分隔符

		* 如果想多个列显示没有分隔符的话 去掉print 里面的逗号就好了
 
/*************************************** (2018-5-3) shell 脚本实例 *****************************************************/
【shell 脚本实例】
	ps 网上有很多小脚本的例子

	觉得shell脚本很适合作小单位的功能测试的自动化部署 


/*************************************** (2018-5-2) shell 脚本 *****************************************************/

【linux 用户、用户组管理】
	用户管理
		useradd 
			-g 指定用户所属用户组 -G 附加组 【这里有一个点需要注意 就是用户组是分主组和附加组的】
			-c 注释
			-d 指定用户主目录
			-s 指定用户登录shell
		userdel 
			-r 将用户所在目录一起删除
		usermod
			同useradd

	用户口令管理（新创建的用户并不能直接使用 需要创建口令）
		passwd 【选项】 【用户名】
			-d 指定空口令

	用户组管理
		groupadd
			-g 为用户组指定标识符号
		groupdel

		groupmod

		newgrp ： 将当前用户切换到另一个用户组





【shell 字符串和数字】
	其实主要讲的是字符串变量的展开形式 、 逻辑运算符
	注意一下 算数运算符 要利用 （()）这个符号

【shell 数组】	
	创建数组的两种方式：
		a[1] = value
		declare -a a
	数组赋值
	    foo=([2]=a [4]=b [6]=c)
	    foo={a,b,c}

	打印数组：* @
	for i in ${a[*]}

	数组操作：
		增：+=
		删：unset
		改：
		查（排序） ：管道排序

直至 《linux command line》shell一节 就过了一遍 以后就在实践中掌握了 另 多去看看 “从shell眼中看世界”这一章


【vim 一些常用的编辑命令】
	了解 普通模式 和命令模式
	
	插入
	删除
	移动光标到行 G：移动到文件末尾 numberG：移动到具体行
	移动光标到列
	剪切（d）、复制（yy）、粘贴（p）
	查找：/ n
/*************************************** (2018-4-28) shell 脚本 *****************************************************/

这几天又偷懒了。。。 

1. 开始写shell脚本
	sheBang bin/bash #!
2. 文件执行权限
3. 对应路径
4. 【vim 高亮语法】 这又可以作为一个小知识集 切入


shell 变量和常量 
	* 赋值过程中，变量名、等号和变量值之间必须没有空格
	* 变量中的花括号 对上下文环境起一个隔离作用

【shell函数】
	1.function simple {
		body
		return
	}
	2.simple() {
		body
		return 
	}

heredoc 主要的作用就是生成某些报告（heredoc里面回原样输出双引号、单引号）


【shell 判断】	

	* 在shell 判断中 我们可能会经常使用 “退出状态” $? = 0 表示命令执行成功

	常用的文件判断：
		-f 文件存在且为普通文件
		-d 文件存在且为目录

	常用的字符串判断：
		string 字符串不为空
		string1==string2 字符串相等

		-n string 字符串长度大于0
		-z string 字符串长度等于0

	常用的整型判断：
		-eq 相等
		-ne 不等
		-ge 大等于
		-gt 大于

	[[]] 里面是表达式 他额外增加了两种判断
		1. =- 匹配正则表达式
		2. 匹配通配符


【shell 脚本循环】
	while ；do 
		body
	done

	case $REPLY in
		0)
			body
		;;
		1)

		;;
	easc


	for i in [words]; do
		body
	done
for 循环的好处是 他的[words]列表 可以有很多中展开方式 例如：*、{}、



【shell 读取命令行参数】
	首先一个shell 脚本默认有$0-$9的变量对应不同位置的参数 其中0代表当前文件的执行路径

	也可以运用 shift + $# 移动变量 其中$#代表命令行参数个数
 
	

【插曲 PHP Array 数组函数】	
	array_unique(array) 如果两个元素的值相同 只保留前面的 其余的删除
	array_flip(trans) 反转数组的键值对 有重复的会保留最后一个
